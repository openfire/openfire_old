// Generated by CoffeeScript 1.3.3
(function() {
  var ActivityItem, AddUserRole, Asset, AuthController, Back, Comment, CreateProposal, Follow, GoalReached, Key, Login, MediaError, MediaUpdate, Openfire, OpenfireController, OpenfireException, OpenfireObject, Project, ProjectAvatar, ProjectCard, ProjectClosed, ProjectController, ProjectImage, ProjectOpened, ProjectVideo, Proposal, ProposalController, ProposalDenied, ProposalPromoted, ProposalReturned, Session, Signup, ThresholdReached, Update, User, UserController, UserPermissionsError, Util,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  if (this.__openfire_preinit != null) {
    this.__openfire_preinit.abstract_base_objects = [];
    this.__openfire_preinit.abstract_base_classes = [];
    this.__openfire_preinit.abstract_base_controllers = [];
  } else {
    this.__openfire_preinit = {
      abstract_base_objects: [],
      abstract_base_classes: [],
      abstract_base_controllers: []
    };
  }

  OpenfireObject = (function(_super) {

    __extends(OpenfireObject, _super);

    function OpenfireObject() {
      return OpenfireObject.__super__.constructor.apply(this, arguments);
    }

    return OpenfireObject;

  })(CoreObject);

  OpenfireController = (function() {

    function OpenfireController() {}

    return OpenfireController;

  })();

  OpenfireException = (function(_super) {

    __extends(OpenfireException, _super);

    function OpenfireException(controller, message) {
      this.controller = controller;
      this.message = message;
    }

    OpenfireException.prototype.toString = function() {
      return '[' + this.controller + '] OpenfireException: ' + this.message;
    };

    return OpenfireException;

  })(Error);

  MediaError = (function(_super) {

    __extends(MediaError, _super);

    function MediaError() {
      return MediaError.__super__.constructor.apply(this, arguments);
    }

    return MediaError;

  })(OpenfireException);

  UserPermissionsError = (function(_super) {

    __extends(UserPermissionsError, _super);

    function UserPermissionsError() {
      return UserPermissionsError.__super__.constructor.apply(this, arguments);
    }

    return UserPermissionsError;

  })(OpenfireException);

  Util = new window.Util();

  this.__openfire_preinit.abstract_base_objects.push(OpenfireObject);

  this.__openfire_preinit.abstract_base_controllers.push(OpenfireController);

  this.__openfire_preinit.abstract_base_classes.push(OpenfireException);

  this.__openfire_preinit.abstract_base_classes.push(MediaError);

  this.__openfire_preinit.abstract_base_classes.push(UserPermissionsError);

  Key = (function() {

    function Key(key) {
      this.key = key;
      return this;
    }

    return Key;

  })();

  ProjectCard = (function() {

    function ProjectCard() {}

    ProjectCard.prototype.name = String();

    ProjectCard.prototype.project = Key();

    ProjectCard.prototype.progress = String();

    ProjectCard.prototype.backer_count = Number();

    ProjectCard.prototype.met = Boolean();

    return ProjectCard;

  })();

  ActivityItem = (function() {

    function ActivityItem() {}

    ActivityItem.prototype.timestamp = Date();

    ActivityItem.prototype.project = Key();

    return ActivityItem;

  })();

  Follow = (function(_super) {

    __extends(Follow, _super);

    function Follow() {
      return Follow.__super__.constructor.apply(this, arguments);
    }

    Follow.prototype.username = String();

    Follow.prototype.project = Key();

    Follow.prototype.timestamp = Date();

    return Follow;

  })(ActivityItem);

  Back = (function(_super) {

    __extends(Back, _super);

    function Back() {
      return Back.__super__.constructor.apply(this, arguments);
    }

    Back.prototype.username = String();

    Back.prototype.project = Key();

    Back.prototype.timestamp = Date();

    return Back;

  })(ActivityItem);

  Update = (function(_super) {

    __extends(Update, _super);

    function Update() {
      return Update.__super__.constructor.apply(this, arguments);
    }

    Update.prototype.username = String();

    Update.prototype.text = String();

    Update.prototype.timestamp = Date();

    Update.prototype.project = Key();

    return Update;

  })(ActivityItem);

  MediaUpdate = (function(_super) {

    __extends(MediaUpdate, _super);

    function MediaUpdate() {
      return MediaUpdate.__super__.constructor.apply(this, arguments);
    }

    return MediaUpdate;

  })(Update);

  GoalReached = (function(_super) {

    __extends(GoalReached, _super);

    function GoalReached() {
      return GoalReached.__super__.constructor.apply(this, arguments);
    }

    return GoalReached;

  })(Update);

  ThresholdReached = (function(_super) {

    __extends(ThresholdReached, _super);

    function ThresholdReached() {
      return ThresholdReached.__super__.constructor.apply(this, arguments);
    }

    return ThresholdReached;

  })(Update);

  ProjectOpened = (function(_super) {

    __extends(ProjectOpened, _super);

    function ProjectOpened() {
      return ProjectOpened.__super__.constructor.apply(this, arguments);
    }

    return ProjectOpened;

  })(Update);

  ProjectClosed = (function(_super) {

    __extends(ProjectClosed, _super);

    function ProjectClosed() {
      return ProjectClosed.__super__.constructor.apply(this, arguments);
    }

    return ProjectClosed;

  })(Update);

  CreateProposal = (function(_super) {

    __extends(CreateProposal, _super);

    function CreateProposal() {
      return CreateProposal.__super__.constructor.apply(this, arguments);
    }

    return CreateProposal;

  })(ActivityItem);

  ProposalPromoted = (function(_super) {

    __extends(ProposalPromoted, _super);

    function ProposalPromoted() {
      return ProposalPromoted.__super__.constructor.apply(this, arguments);
    }

    return ProposalPromoted;

  })(Update);

  ProposalDenied = (function(_super) {

    __extends(ProposalDenied, _super);

    function ProposalDenied() {
      return ProposalDenied.__super__.constructor.apply(this, arguments);
    }

    return ProposalDenied;

  })(Update);

  ProposalReturned = (function(_super) {

    __extends(ProposalReturned, _super);

    function ProposalReturned() {
      return ProposalReturned.__super__.constructor.apply(this, arguments);
    }

    return ProposalReturned;

  })(Update);

  AddUserRole = (function(_super) {

    __extends(AddUserRole, _super);

    function AddUserRole() {
      return AddUserRole.__super__.constructor.apply(this, arguments);
    }

    return AddUserRole;

  })(ActivityItem);

  Comment = (function(_super) {

    __extends(Comment, _super);

    function Comment() {
      return Comment.__super__.constructor.apply(this, arguments);
    }

    Comment.prototype.username = String();

    Comment.prototype.text = String();

    return Comment;

  })(ActivityItem);

  Login = (function() {

    function Login() {}

    return Login;

  })();

  Signup = (function() {

    function Signup() {}

    return Signup;

  })();

  Session = (function(_super) {

    __extends(Session, _super);

    Session["export"] = 'private';

    Session.events = ['SESSION_START', 'SESSION_ENDED'];

    function Session(openfire) {
      var _this = this;
      this._state = {
        status: null,
        init: false
      };
      this.internal = {
        resolve_storage_driver: function() {
          return storage;
        },
        provision_token: function() {
          return token;
        }
      };
      this.start = function() {
        return session;
      };
      this.end = function() {};
    }

    return Session;

  })(OpenfireObject);

  User = (function(_super) {

    __extends(User, _super);

    User["export"] = 'private';

    User.events = [];

    function User(openfire) {
      return;
    }

    return User;

  })(OpenfireObject);

  AuthController = (function(_super) {

    __extends(AuthController, _super);

    AuthController.events = [];

    function AuthController(openfire, window) {
      var _this = this;
      this._state = {
        init: false
      };
      this.internal = {
        session: {
          open: function() {
            var s;
            return (s = new Session()).start();
          },
          close: function(session) {
            return session.end();
          }
        }
      };
      this.login = function() {};
      this.create_user = function() {};
      this._init = function() {};
    }

    return AuthController;

  })(OpenfireController);

  if (this.__openfire_preinit != null) {
    this.__openfire_preinit.abstract_base_objects.push(Session);
    this.__openfire_preinit.abstract_base_classes.push(User);
    this.__openfire_preinit.abstract_base_controllers.push(AuthController);
  }

  UserController = (function(_super) {

    __extends(UserController, _super);

    UserController.events = [];

    function UserController(openfire, window) {
      var _this = this;
      this._init = function() {};
      return;
    }

    return UserController;

  })(OpenfireController);

  if (this.__openfire_preinit != null) {
    this.__openfire_preinit.abstract_base_controllers.push(UserController);
  }

  Asset = (function() {

    function Asset(hash) {
      var prop, val;
      if ((hash != null) && Util.is_object(hash)) {
        for (prop in hash) {
          val = hash[prop];
          this[prop] = val;
        }
      }
      return this;
    }

    return Asset;

  })();

  ProjectImage = (function(_super) {

    __extends(ProjectImage, _super);

    function ProjectImage() {
      return ProjectImage.__super__.constructor.apply(this, arguments);
    }

    return ProjectImage;

  })(Asset);

  ProjectVideo = (function(_super) {

    __extends(ProjectVideo, _super);

    function ProjectVideo() {
      return ProjectVideo.__super__.constructor.apply(this, arguments);
    }

    return ProjectVideo;

  })(Asset);

  ProjectAvatar = (function(_super) {

    __extends(ProjectAvatar, _super);

    function ProjectAvatar() {
      return ProjectAvatar.__super__.constructor.apply(this, arguments);
    }

    return ProjectAvatar;

  })(Asset);

  Project = (function() {
    /*
        name: String()
        status: String()
        category: String()
        summary: String()
        pitch: String()
        tech: String()
        keywords: Array()
        creator: String()
        owners: Array()
        goals: Array()
        tiers: Array()
    */

    function Project(key) {
      this.key = key;
      this.from_message = __bind(this.from_message, this);

      this.attach = __bind(this.attach, this);

      this.assets = [];
      this.assets_by_key = {};
      return this;
    }

    Project.prototype.attach = function(asset) {
      this.assets_by_key[asset.key] = this.assets.push(asset) - 1;
      return this;
    };

    Project.prototype.from_message = function(message) {
      return Util.extend(true, this, message);
    };

    return Project;

  })();

  Proposal = (function() {

    function Proposal(key) {
      this.key = key;
      return this;
    }

    return Proposal;

  })();

  ProjectController = (function(_super) {

    __extends(ProjectController, _super);

    ProjectController.mount = 'project';

    ProjectController.events = ['PROJECT_CONTROLLER_READY', 'PROJECT_CONTROLLER_INIT', 'PROJECT_MEDIA_ADDED', 'PROJECT_AVATAR_ADDED', 'PROJECT_BACKED', 'PROJECT_EDITED', 'PROJECT_FOLLOWED', 'PROJECT_READY', 'PROJECT_SHARED', 'PROJECT_UPDATED'];

    ProjectController.project = null;

    ProjectController.project_key = null;

    ProjectController.uploader = null;

    function ProjectController(openfire) {
      this.update = __bind(this.update, this);

      this.share = __bind(this.share, this);

      this.get_updates = __bind(this.get_updates, this);

      this.get_followers = __bind(this.get_followers, this);

      this.get_backers = __bind(this.get_backers, this);

      this.get = __bind(this.get, this);

      this.follow = __bind(this.follow, this);

      this.edit = __bind(this.edit, this);

      this.back = __bind(this.back, this);

      this.add_media = __bind(this.add_media, this);

      var k,
        _this = this;
      this._state = Util.extend(true, {}, window._cp);
      this.project = new Project(k = new Key(this._state.ke));
      this.project_key = this.project.key.key;
      this._init = function() {
        if (window._cp) {
          document.getElementById('follow').addEventListener('click', _this.follow, false);
          document.getElementById('share').addEventListener('click', _this.share, false);
          document.getElementById('back').addEventListener('click', _this.back, false);
          if (_this._state.o) {
            document.body.addEventListener('drop', _this.add_media, false);
          }
        }
        return _this.get();
      };
    }

    ProjectController.prototype.add_media = function(file_or_url, kind) {
      var choice, e, fi, file, files, filetype, reader, url, _i, _len,
        _this = this;
      if (this._state.o) {
        if (file_or_url.preventDefault) {
          file_or_url.preventDefault();
          file_or_url.stopPropagation();
          e = file_or_url;
          files = e.dataTransfer.files;
          if (files != null) {
            for (_i = 0, _len = files.length; _i < _len; _i++) {
              fi = files[_i];
              return this.add_media(fi, 'image');
            }
          }
        }
        if (file_or_url.size && file_or_url.type) {
          file = file_or_url;
          filetype = file.type;
          console.log('Received dropped ', filetype);
          reader = new FileReader();
          reader.file = file;
          reader.onloadend = function(e) {
            e.preventDefault();
            e.stopPropagation();
            return Util.get('project-image-drop-preview').setAttribute('src', e.target.result);
          };
          choice = $.apptools.widgets.modal.create((function() {
            var docfrag, options;
            options = JSON.stringify({
              ratio: {
                x: 0.3,
                y: 0.3
              }
            });
            docfrag = Util.create_doc_frag((function() {
              return Util.create_element_string('div', {
                id: 'project-image-drop-choice',
                style: 'width: 100%;margin: 0 auto;opacity: 0;text-align: center;background-color: #eee;font-size: 9pt;',
                "class": 'pre-modal',
                "data-title": 'Hey, you dropped your photo!'
              }).split('*').join([
                '', Util.create_element_string('img', {
                  id: 'project-image-drop-preview',
                  style: 'max-width: 140px;',
                  "class": 'dropshadow'
                }), '', '', '<span style="font-size: 14px; font-weight: bolder;">My, that looks nice.</span>', '', '', '', 'Would you like to attach "' + file.name + '" to your project?', '', '', [
                  Util.create_element_string('button', {
                    id: 'project-image-drop-avatar',
                    "class": 'rounded',
                    value: 'avatar'
                  }).split('*').join('yes!<br>(as an avatar)'), Util.create_element_string('button', {
                    id: 'project-image-drop-image',
                    "class": 'rounded',
                    value: 'image'
                  }).split('*').join('yes!<br>(as an image)'), Util.create_element_string('button', {
                    id: 'project-image-drop-no',
                    "class": 'rounded',
                    value: 'no'
                  }).split('*').join('oops!<br>(no thanks)')
                ].join('')
              ].join('<br>'));
            })());
            document.body.appendChild(docfrag);
            return document.getElementById('project-image-drop-choice');
          })(), (function() {
            var docfrag;
            docfrag = Util.create_doc_frag((function() {
              return Util.create_element_string('a', {
                id: 'a-project-image-drop-choice',
                href: '#project-image-drop-choice',
                style: 'display: none;'
              });
            })());
            document.body.appendChild(docfrag);
            return document.getElementById('a-project-image-drop-choice');
          })(), function(m) {
            return m.open();
          }, {
            initial: {
              width: '0px',
              height: '0px',
              bottom: '60px',
              right: '60px'
            },
            ratio: {
              x: 0.3,
              y: 0.5
            },
            calc: function() {
              var css, mH, mW, r, wH, wW;
              css = {};
              r = this.ratio;
              wW = window.innerWidth;
              wH = window.innerHeight;
              mW = Math.floor(r.x * wW);
              mH = Math.floor(r.y * wH);
              css.width = mW + 'px';
              css.height = mH + 'px';
              css.bottom = this.initial.bottom;
              css.right = this.initial.right;
              return css;
            }
          });
          if (/^image\/(png|jpeg|gif)$/gi.test(filetype)) {
            reader.readAsDataURL(file);
            Util.get('project-image-drop-image').addEventListener('click', function(e) {
              var btn, callback;
              if (e.preventDefault) {
                e.preventDefault();
                e.stopPropagation();
              }
              (btn = e.target).innerHTML = 'Great!<br>Uploading...';
              callback = function(res) {
                console.log('attach_image() callback reached!');
                console.log('callback response: ', res);
                _this.project.attach(new ProjectImage(res));
                $.apptools.events.trigger('PROJECT_MEDIA_ADDED', _this);
                btn.style.backgroundColor = '#bada55';
                btn.innerHTML = 'Awesome!<br>Good to go.';
                return _this;
              };
              return $.apptools.api.media.attach_image({
                target: _this.project_key,
                size: file.size,
                name: file.name
              }).fulfill({
                success: function(response) {
                  var uploader;
                  if (!(_this.uploader != null)) {
                    uploader = $.apptools.widgets.uploader.create('data', {
                      id: 'body',
                      endpoints: [response.endpoint],
                      finish: callback
                    });
                    _this.uploader = uploader;
                  } else {
                    uploader = _this.uploader.add_endpoint(response.endpoint);
                    uploader = uploader.add_callback(callback);
                  }
                  return uploader.upload(file);
                },
                failure: function(error) {
                  btn.style.backgroundColor = '#ee9099';
                  btn.innerHTML = 'Bummer!<br> :(';
                  return alert('uploaded attach_image() failure');
                }
              });
            }, false);
            Util.get('project-image-drop-avatar').addEventListener('click', function(e) {
              var btn, callback;
              if (e.preventDefault) {
                e.preventDefault();
                e.stopPropagation();
              }
              (btn = e.target).innerHTML = 'Great!<br>Uploading...';
              callback = function(res) {
                console.log('attach_image() callback reached!');
                console.log('callback response: ', res);
                _this.project.attach(new ProjectAvatar(res));
                $.apptools.events.trigger('PROJECT_AVATAR_ADDED', _this);
                btn.style.backgroundColor = '#bada55';
                return btn.innerHTML = 'Awesome!<br>Good to go.';
              };
              return $.apptools.api.media.attach_avatar({
                target: _this.project_key,
                size: file.size,
                name: file.name
              }).fulfill({
                success: function(response) {
                  var uploader;
                  if (!(_this.uploader != null)) {
                    uploader = $.apptools.widgets.uploader.create('data', {
                      id: 'body',
                      endpoints: [response.endpoint],
                      finish: callback
                    });
                    _this.uploader = uploader;
                  } else {
                    uploader = _this.uploader.add_endpoint(response.endpoint);
                    uploader = uploader.add_callback(callback);
                  }
                  return uploader.upload(file);
                },
                failure: function(error) {
                  btn.style.backgroundColor = '#ee9099';
                  btn.innerHTML = 'Bummer!<br> :(';
                  return alert('uploaded attach_avatar() failure');
                }
              });
            }, false);
            Util.get('project-image-drop-no').addEventListener('click', function(e) {
              if (e.preventDefault) {
                e.preventDefault();
                e.stopPropagation();
              }
              return $.apptools.widgets.modal.get('project-image-drop-choice').close();
            }, false);
          } else {
            throw new MediaError(this.constructor.name, 'Tried to upload unsupported filetype. Images must be .jpg, .png, or .gif.');
          }
        } else {
          url = file_or_url;
          console.log('received url to attach: ', url);
          if (kind === 'image') {
            return $.apptools.api.media.attach_image({
              intake: 'url',
              target: this.project_key
            }).fulfill({
              success: function(response) {
                _this.project.attach(new Image(response.media_key, response.serve_url));
                return $.apptools.events.trigger('PROJECT_MEDIA_ADDED', _this);
              },
              failure: function(error) {
                return alert('url-linked attach_image() failure');
              }
            });
          } else if (kind === 'video') {
            return $.apptools.api.media.attach_video({
              reference: url,
              target: this.project_key
            }).fulfill({
              success: function(response) {
                _this.project.attach(new Video(response.media_key, response.serve_url));
                return $.apptools.events.trigger('PROJECT_MEDIA_ADDED', _this);
              },
              failure: function(error) {
                return alert('attach_video() failure');
              }
            });
          } else {
            throw new MediaError(this.constructor.name, 'Unrecognized media kind linked.');
          }
        }
      } else {
        throw new UserPermissionsError(this.constructor.name, 'Current user is not a project owner.');
      }
    };

    ProjectController.prototype.back = function() {
      var _this = this;
      return $.apptools.api.project.back({
        target: this.project_key
      }).fulfill({
        success: function(response) {
          return $('#back-text').animate({
            opacity: 0
          }, {
            duration: 250,
            complete: function() {
              document.getElementById('back-text').innerHTML = 'you rock.';
              document.getElementById('back').classList.add('backed');
              return $('#back-text').animate({
                opacity: 1
              }, {
                duration: 250,
                complete: function() {
                  return alert('back() success');
                }
              });
            }
          });
        },
        failure: function(error) {
          return alert('back() failure');
        }
      });
    };

    ProjectController.prototype.edit = function() {};

    ProjectController.prototype.follow = function() {
      var _this = this;
      return $.apptools.api.project.follow({
        target: this.project_key
      }).fulfill({
        success: function(response) {
          document.getElementById('follow').classList.add('following');
          return alert('follow() success');
        },
        failure: function(error) {
          return alert('follow() failure');
        }
      });
    };

    ProjectController.prototype.get = function(from_server) {
      var _this = this;
      if (from_server) {
        return $.apptools.api.project.get({
          target: this.project_key
        }).fulfill({
          success: function(response) {
            return _this.project.from_message(response);
          },
          failure: function(error) {
            return alert('get() failure');
          }
        });
      } else {
        return this.project;
      }
    };

    ProjectController.prototype.get_backers = function() {
      var _this = this;
      return $.apptools.api.project.backers({
        target: this.project_key
      }).fulfill({
        success: function(response) {
          return alert('get_backers() success');
        },
        failure: function(error) {
          return alert('get_backers() failure');
        }
      });
    };

    ProjectController.prototype.get_followers = function() {
      var _this = this;
      return $.apptools.api.project.followers({
        target: this.project_key
      }).fulfill({
        success: function(response) {
          return alert('get_followers() success');
        },
        failure: function(error) {
          return alert('get_followers() failure');
        }
      });
    };

    ProjectController.prototype.get_updates = function() {
      var _this = this;
      return $.apptools.api.project.posts({
        target: this.project_key
      }).fulfill({
        success: function(response) {
          return alert('get_updates() success');
        },
        failure: function(error) {
          return alert('get_updates() failure');
        }
      });
    };

    ProjectController.prototype.share = function(sm_service) {
      return alert('Testing social sharing!');
    };

    ProjectController.prototype.update = function() {
      var _this = this;
      if (this._state.o) {
        return $.apptools.api.project.post({
          target: this.project_key
        }).fulfill({
          success: function() {
            return alert('update() success');
          },
          failure: function(error) {
            return alert('update() failure');
          }
        });
      } else {
        throw new UserPermissionsError(this.constructor.name, 'Current user is not a project owner.');
      }
    };

    return ProjectController;

  })(OpenfireController);

  ProposalController = (function(_super) {

    __extends(ProposalController, _super);

    ProposalController.events = [];

    function ProposalController(openfire, window) {
      var _this = this;
      this._init = function() {};
    }

    return ProposalController;

  })(OpenfireController);

  if (this.__openfire_preinit != null) {
    this.__openfire_preinit.abstract_base_objects.push(Asset);
    this.__openfire_preinit.abstract_base_objects.push(ProjectImage);
    this.__openfire_preinit.abstract_base_objects.push(ProjectVideo);
    this.__openfire_preinit.abstract_base_objects.push(ProjectVideo);
    this.__openfire_preinit.abstract_base_classes.push(Project);
    this.__openfire_preinit.abstract_base_classes.push(Proposal);
    this.__openfire_preinit.abstract_base_controllers.push(ProjectController);
    this.__openfire_preinit.abstract_base_controllers.push(ProposalController);
  }

  Openfire = (function() {

    function Openfire(window) {
      var _base,
        _this = this;
      this.sys = {
        core_events: ['OPENFIRE_READY'],
        config: {
          session: {
            cookie: "ofsession",
            header: "X-AppFactory-Session",
            timeout: 86400,
            cookieless: false
          },
          csrf: {
            cookie: "ofcsrf",
            header: "X-AppFactory-CSRF"
          }
        },
        state: {
          status: 'NOT_READY',
          flags: [],
          preinit: {},
          controllers: {},
          classes: {},
          objects: {},
          session: {
            data: null,
            verified: false,
            timestamp: null,
            signature: null,
            established: false,
            authenticated: false,
            csrf: {
              next: null,
              history: []
            }
          },
          consider_preinit: function(preinit) {
            var cls, ctrlr, obj, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
            if (preinit.abstract_base_objects != null) {
              _ref = preinit.abstract_base_objects;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                obj = _ref[_i];
                _this.sys.install.object(obj);
              }
            }
            if (preinit.abstract_base_classes != null) {
              _ref1 = preinit.abstract_base_classes;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                cls = _ref1[_j];
                _this.sys.install["class"](cls);
              }
            }
            if (preinit.abstract_base_controllers != null) {
              _ref2 = preinit.abstract_base_controllers;
              for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
                ctrlr = _ref2[_k];
                _this.sys.install.controller(ctrlr);
              }
            }
            return preinit;
          },
          sniff_headers: function(document) {
            var cookie, data, i, key, session, signature, timestamp, _ref, _ref1, _ref2;
            $.apptools.dev.verbose('openfire', 'Sniffing response cookies.');
            try {
              session = null;
              _ref = document.cookie.split(";");
              for (i in _ref) {
                cookie = _ref[i];
                $.apptools.dev.verbose('openfire:sessions', 'Found a cookie.', i, cookie, cookie.replace('"', '').replace('"', '').split("="));
                _ref1 = cookie.split("="), key = _ref1[0], cookie = _ref1[1];
                if (key === _this.sys.config.session.cookie) {
                  _ref2 = session = cookie.split("|"), data = _ref2[0], timestamp = _ref2[1], signature = _ref2[2];
                  $.apptools.dev.verbose('openfire:sessions', 'Possibly valid session cookie found!', _this.sys.config.session.cookie, data, timestamp, signature);
                  if (session.length > 2) {
                    $.apptools.dev.verbose('openfire:sessions', 'Checking session timeout with TTL of ', _this.sys.config.session.timeout, 'and session creation time of', session[1]);
                    if (((+new Date(+timestamp * 1000)) + (_this.sys.config.session.timeout * 1000)) > +new Date()) {
                      session = {
                        data: data,
                        timestamp: timestamp,
                        signature: signature
                      };
                      $.apptools.dev.log('openfire:sessions', 'Valid session found and loaded.', session);
                    }
                  }
                  break;
                }
                continue;
              }
              if (session !== null && session !== false) {
                _this.sys.state.session.data = session.data;
                _this.sys.state.session.timestamp = session.timestamp;
                _this.sys.state.session.signature = signature.replace('"', '');
                _this.sys.state.session.established = true;
              }
            } catch (err) {
              $.apptools.dev.error('openfire:sessions', 'An unknown exception was encountered when attempting to load the user\'s session.', err);
              _this.sys.state.session.error = true;
            }
            return _this.sys.state.session.established;
          }
        },
        install: {
          object: function(obj) {
            var event, o, _i, _len, _ref, _ref1, _ref2;
            _this.sys.state.objects[(o = obj.constructor.name)] = obj;
            if (obj.events != null) {
              _ref = obj.events;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                event = _ref[_i];
                if ((_ref1 = window.apptools) != null) {
                  if ((_ref2 = _ref1.events) != null) {
                    _ref2.register(event);
                  }
                }
              }
            }
            if ((obj["export"] != null) !== 'private') {
              (obj = new obj(_this)) && (window[o] = obj);
            } else {
              obj = new obj();
            }
            if (typeof obj._init === "function") {
              obj._init();
            }
            return obj;
          },
          "class": function(cls) {
            var cl, event, _i, _len, _ref, _ref1, _ref2;
            _this.sys.state.classes[(cl = cls.constructor.name)] = cls;
            if (cls.events != null) {
              _ref = cls.events;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                event = _ref[_i];
                if ((_ref1 = window.apptools) != null) {
                  if ((_ref2 = _ref1.events) != null) {
                    _ref2.register(event);
                  }
                }
              }
            }
            if ((cls["export"] != null) !== 'private') {
              (cls = new cls(_this)) && (window[cl] = cls);
            } else {
              cls = new cls();
            }
            if (typeof cls._init === "function") {
              cls._init();
            }
            return cls;
          },
          controller: function(ctrlr) {
            var event, mount_point, _i, _len, _ref, _ref1, _ref2;
            _this.sys.state.controllers[ctrlr.mount] = ctrlr;
            if (ctrlr.events != null) {
              _ref = ctrlr.events;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                event = _ref[_i];
                if ((_ref1 = window.apptools) != null) {
                  if ((_ref2 = _ref1.events) != null) {
                    _ref2.register(event);
                  }
                }
              }
            }
            if (ctrlr.mount != null) {
              mount_point = ctrlr.mount;
            }
            if ((ctrlr["export"] != null) !== 'private') {
              (ctrlr = new ctrlr(_this, window)) && (window[ctrlr.constructor.name] = ctrlr);
            } else {
              ctrlr = new ctrlr(window);
            }
            _this[mount_point] = ctrlr;
            if (typeof ctrlr._init === "function") {
              ctrlr._init();
            }
            return ctrlr;
          }
        },
        go: function() {
          var _ref, _ref1;
          if ((_ref = window.apptools) != null) {
            if ((_ref1 = _ref.dev) != null) {
              _ref1.verbose('Openfire', 'Openfire systems go.');
            }
          }
          _this.sys.state.status = 'READY';
          return _this;
        }
      };
      if (window.__openfire_preinit != null) {
        this.sys.state.preinit = window.__openfire_preinit;
        this.sys.state.consider_preinit(window.__openfire_preinit);
      }
      if (typeof (_base = this.sys.state).sniff_headers === "function" ? _base.sniff_headers(document) : void 0) {
        if (this.sys.config.session.cookieless) {
          $.apptools.api.internals.config.headers[this.sys.config.csrf.header] = this.sys.state.session.signature;
          $.apptools.api.internals.config.headers[this.sys.config.session.header] = document.cookie;
        }
      }
      return this.sys.go();
    }

    return Openfire;

  })();

  window.Openfire = Openfire;

  window.openfire = new Openfire(window);

  if (typeof $ !== "undefined" && $ !== null) {
    $.extend({
      openfire: window.openfire
    });
  } else {
    window.$ = function(id) {
      if (window.Util != null) {
        return window.Util.get(id);
      } else {
        return document.getElementById(id);
      }
    };
    window.$.openfire = window.openfire;
  }

}).call(this);
