from __future__ import division
from jinja2.runtime import LoopContext, TemplateReference, Macro, Markup, TemplateRuntimeError, missing, concat, escape, markup_join, unicode_join, to_string, identity, TemplateNotFound
def run(environment):
    name = '/source/bbq/moderate.html'

    def root(context, environment=environment):
        parent_template = None
        if 0: yield None
        parent_template = environment.get_template('layout/bbq.html', '/source/bbq/moderate.html')
        for name, parent_block in parent_template.blocks.iteritems():
            context.blocks.setdefault(name, []).append(parent_block)
        for event in parent_template.root_render_func(context):
            yield event

    def block_moderate(context, environment=environment):
        if 0: yield None
        yield u'\n<div>\n    <h1>We decide all!</h1>\n    '
        template = environment.get_template('bbq/bbq_categories.html', '/source/bbq/moderate.html')
        for event in template.root_render_func(template.new_context(context.parent, True, locals())):
            yield event
        yield u'\n\n    '
        template = environment.get_template('bbq/bbq_proposals.html', '/source/bbq/moderate.html')
        for event in template.root_render_func(template.new_context(context.parent, True, locals())):
            yield event
        yield u'\n\n    '
        template = environment.get_template('bbq/bbq_projects.html', '/source/bbq/moderate.html')
        for event in template.root_render_func(template.new_context(context.parent, True, locals())):
            yield event
        yield u'\n</div>\n'

    def block_postsouth(context, environment=environment):
        if 0: yield None
        yield u'\n<script type="text/javascript">\n    /*\n     * TODO: Refactor and move all this code to assests.\n     */\n\n    $(document).ready(function() {\n\n        function fulfillBbqRequest(request, errMsg) {\n            request.fulfill({\n                success: function(obj, objType, rawResponse) {\n                    document.location.reload();\n                },\n                error: function(err) {\n                    alert("There was an error: " + errMsg);\n                }\n            });\n        }\n\n        function lightGrill() {\n            /*\n             * New objects.\n             */\n\n            $(".show-new-inline").click(function() {\n                var self = $(this);\n                self.hide();\n                self.next(".inline-form").show();\n            });\n\n            $(".cancel-new-inline").click(function() {\n                var self = $(this);\n                self.parents(".inline-form").hide();\n                self.parents(".inline-form").prev(".show-new-inline").show();\n            });\n\n            $(".save-new-inline").click(function() {\n                var reqeust = null;\n                switch (this.id) {\n                case "save-new-category-btn":\n                    var categoryDict = {\n                        name: $("#new-category-name-input").val(),\n                        slug: $("#new-category-url-input").val(),\n                        description: $("#new-category-description-input").val()\n                    };\n                    request = $.apptools.api.category.put(categoryDict);\n                    break;\n\n                case "save-new-proposal-btn":\n                    // TODO: Need to make the creator and category keys work correctly.\n                    var proposalDict = {\n                        name: $("#new-proposal-name-input").val(),\n                        slug: $("#new-proposal-url-input").val(),\n                        summary: $("#new-proposal-summary-input").val(),\n                        category: $("#new-proposal-category-input").val(),\n                        status: $("#new-proposal-status-input").val(),\n                        pitch: $("#new-proposal-pitch-input").val(),\n                        tech: $("#new-proposal-tech-input").val(),\n                        keywords: $("#new-proposal-keywords-input").val(),\n                        creator: $("#new-proposal-creator-input").val(),\n                    };\n                    request = $.apptools.api.proposal.put(proposalDict);\n                    break;\n\n                default:\n                    alert("What button did you just click? (it was " + this.id + ")");\n                    break;\n                }\n                if (request) {\n                    fulfillBbqRequest(request, "Failed to something.");\n                }\n            });\n\n            $(".delete-object").click(function() {\n                var toDelete = this.id.match(/delete-(\\w+)-(\\w+)/),\n                    request = null;\n                switch (toDelete[1]) {\n                case "category":\n                    request = $.apptools.api.category.delete({slug: toDelete[2]});\n                    break;\n\n                case "proposal":\n                    request = $.apptools.api.proposal.delete({slug: toDelete[2]});\n                    break;\n\n                default:\n                    alert("That failed: (" + toDelete + ")");\n                    break;\n                }\n\n                if (request) {\n                    fulfillBbqRequest(request, "Failed to delete category");\n                }\n            });\n\n            /*\n             * Edit objects.\n             */\n\n            $(".start-edit-inline").click(function() {\n                var toEdit = this.id.match(/start-edit-(\\w+)-(\\w+)/),\n                    editType = toEdit[1],\n                    slug = toEdit[2];\n                $("#start-edit-" + editType + "-" + slug).hide();\n                $("#save-edit-" + editType + "-" + slug).show();\n                $("#cancel-edit-" + editType + "-" + slug).show();\n                $("#" + editType + "-display-" + slug).hide();\n                $("#" + editType + "-inputs-" + slug).show();\n            });\n\n            $(".cancel-edit-inline").click(function() {\n                var toEdit = this.id.match(/cancel-edit-(\\w+)-(\\w+)/),\n                    editType = toEdit[1],\n                    slug = toEdit[2];\n                $("#start-edit-" + editType + "-" + slug).show();\n                $("#save-edit-" + editType + "-" + slug).hide();\n                $("#cancel-edit-" + editType + "-" + slug).hide();\n                $("#" + editType + "-display-" + slug).show();\n                $("#" + editType + "-inputs-" + slug).hide();\n            });\n\n            $(".save-edit-inline").click(function() {\n                var toSave = this.id.match(/save-edit-(\\w+)-(\\w+)/);\n                switch (toSave[1]) {\n                case "category":\n                    var categoryDict = {\n                            key: $("#category-inputs-" + toSave[2] + " .slug-input").val(),\n                            slug: $("#category-inputs-" + toSave[2] + " .slug-input").val(),\n                            name: $("#category-inputs-" + toSave[2] + " .name-input").val(),\n                            description: $("#category-inputs-" + toSave[2] + " .description-input").val()\n                        },\n                        request = $.apptools.api.category.put(categoryDict);\n                    break;\n\n                case "proposal":\n                    break;\n\n                default:\n                    alert("What button did you just click? (it was " + this.id + ")");\n                    break;\n                }\n\n                fulfillBbqRequest(request, "Failed to edit something.");\n            });\n        }\n\n        lightGrill();\n    });\n</script>\n'

    blocks = {'moderate': block_moderate, 'postsouth': block_postsouth}
    debug_info = '1=9&3=15&6=18&8=22&10=26&14=31'
    return locals()